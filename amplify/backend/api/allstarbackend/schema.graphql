type Video @model @auth(rules: [{allow: private}]) {
  id: ID!
  title: String
  description: String
  duration: String
  Exercises: [Exercise] @manyToMany(relationName: "VideoExercise")
  VideoUrl: String
  thumbnailUrl: String
}

type DietDayDetails @model @auth(rules: [{allow: private}]) {
  id: ID!
  time: String
  goal: String
  content: String
  protein: String
  quarge: String
  recipe: String
  dietdaysID: ID! @index(name: "byDietDays")
}

type DietDays @model @auth(rules: [{allow: private}]) {
  id: ID!
  day: Int
  title: String
  DietDayDetails: [DietDayDetails] @hasMany(indexName: "byDietDays", fields: ["id"])
  description: String
  dietrecipeID: ID! @index(name: "byDietRecipe")
}

type DietRecipeProgress @model @auth(rules: [{allow: private}]) {
  id: ID!
  startDate: AWSDateTime
  description: String
  comment: String
  DietRecipe: DietRecipe @hasOne
  userID: ID! @index(name: "byUser")
  isPaused: String
}

type DietRecipe @model @auth(rules: [{allow: private}]) {
  id: ID!
  name: String!
  gender: String
  recipeName: String!
  description: String
  imageUrl: String
  onboardingImageUrl: String
  backgroundColor: String
  Diets: [DietDays] @hasMany(indexName: "byDietRecipe", fields: ["id"])
  userID: ID @index(name: "byUser")
}

type TrainingType @model @auth(rules: [{allow: private}]) {
  id: ID!
  name: String!
  gender: String
  menuName: String!
  description: String
  imageUrl: String
  onboardingImageUrl: String
  backgroundColor: String
  exercises: [Exercise] @manyToMany(relationName: "TrainingTypeExercise")
  users: [User] @manyToMany(relationName: "UserGoalTrainingTypes")
  workouts: [Workout] @manyToMany(relationName: "WorkoutTrainingTypes")
  programs: [Program] @manyToMany(relationName: "ProgramTrainingTypes")
  challenges: [Challenge] @manyToMany(relationName: "ChallengeTrainingTypes")
}

type MuscleGroup @model @auth(rules: [{allow: private}]) {
  id: ID!
  name: String!
  backgroundColor: String
  specialBackgroundColor: String
  imageUrl: String
  exercises: [Exercise] @manyToMany(relationName: "MuscleGroupExercise")
  users: [User] @manyToMany(relationName: "UserGoalMuscleGroups")
  workouts: [Workout] @manyToMany(relationName: "WorkoutMusleGroups")
  programs: [Program] @manyToMany(relationName: "ProgramMuscleGroups")
  challenges: [Challenge] @manyToMany(relationName: "ChallengeMuscleGroups")
}

type Onboarding  @model @auth(rules: [ { allow: owner },{ allow: public, provider: iam }]) {
  id: ID!
  imageUrl: String
  description: String
  isDisplay: String
}

type Equipment @model @auth(rules: [{allow: private}]) {
  id: ID!
  name: String!
  imageUrl: String
  backgroundColor: String
  exercises: [Exercise] @manyToMany(relationName: "EquipmentExercise")
}

type Exercise @model @auth(rules: [{allow: private}]) {
  id: ID!
  title: String
  thumbnailUrl: String
  imageUrl: String
  oneCycleDuration: Int
  views: Int
  likes: Int
  dislikes: Int
  description: String
  backgroundColor: String
  level: Level
  exerciseExtension1: String
  exerciseExtension2: String
  exerciseItem: ExerciseItem @belongsTo
  tags: [Tag] @manyToMany(relationName: "TagExercise")
  videos: [Video] @manyToMany(relationName: "VideoExercise")
  challenges: [Challenge] @manyToMany(relationName: "ChallengeExercise")
  workouts: [Workout] @manyToMany(relationName: "WorkoutExercise")
  trainingtypes: [TrainingType!] @manyToMany(relationName: "TrainingTypeExercise")
  musclegroups: [MuscleGroup!] @manyToMany(relationName: "MuscleGroupExercise")
  equipments: [Equipment!] @manyToMany(relationName: "EquipmentExercise")
  coachs: [Coach!] @manyToMany(relationName: "CoachExercise")
}

type Post @model @auth(rules: [{allow: private}]) {
  id: ID!
  user: User @hasOne
  category: String
  title: String
  caption: String
  readMinutes: Int
  image: String
  content: String
}

type Coach @model @auth(rules: [{allow: private}]) {
  id: ID!
  username: String!
  user: User @hasOne
  backgroundImageUrl: String
  presentationVideoUrl: String
  bio: String
  exercises: [Exercise] @manyToMany(relationName: "CoachExercise")
  workouts: [Workout] @manyToMany(relationName: "CoachWorkouts")
  challenges: [Challenge] @manyToMany(relationName: "CoachChallenges")
}

type ExerciseItem @model @auth(rules: [{allow: private}]) {
  id: ID!
  exercise: Exercise @hasOne
  sets: Int!
  workoutTime: Int!
  restTime: Int!
  order: Int
}

type NewsShownToUser @model @auth(rules: [{allow: private}]) {
  id: ID!
  user: User @hasOne
  news: News @hasOne
}

type User @model @auth(rules: [{allow: private}]) {
  id: ID!
  username: String!
  givenName: String
  displayName: String
  surname: String
  gender: String
  mail: String
  mobile: String
  weight: String
  height: String
  backgroundColor: String
  specialBackgroundColor: String
  imageUrl: String
  age: String
  userType: UserType
  goalTrainingTypes: [TrainingType] @manyToMany(relationName: "UserGoalTrainingTypes")
  goalMuscleGroups: [MuscleGroup] @manyToMany(relationName: "UserGoalMuscleGroups")
  recipes: [DietRecipe] @hasMany(indexName: "byUser", fields: ["id"])
  DietRecipeProgresses: [DietRecipeProgress] @hasMany(indexName: "byUser", fields: ["id"])
}

type News @model @auth(rules: [{allow: private}]) {
  id: ID!
  type: NewsType
  title: String
  description: String
  videoUrl: String
  groupID: ID
  headerText: String
  bannerImageUrl: String
  imageUrl: String
  contentHtml: String
}

type Program @model @auth(rules: [{allow: private}]) {
  id: ID!
  name: String
  imageUrl: String
  homepageImageUrl: String
  backgroundColor: String
  description: String
  duration: String
  level: Level
  workouts: [Workout] @manyToMany(relationName: "ProgramWorkouts")
  muscleGroups: [MuscleGroup] @manyToMany(relationName: "ProgramMuscleGroups")
  trainingTypes: [TrainingType] @manyToMany(relationName: "ProgramTrainingTypes")
}

type Workout @model @auth(rules: [{allow: private}]) {
  id: ID!
  title: String
  description: String
  url: String
  headerImage: String
  backgroundColor: String
  imageUrl: String
  headerDescription: String
  duration: Int
  numberofExercises: Int
  level: String
  equipment: String
  calories: String
  muscleGroups: [MuscleGroup] @manyToMany(relationName: "WorkoutMusleGroups")
  trainingTypes: [TrainingType] @manyToMany(relationName: "WorkoutTrainingTypes")
  programs: [Program] @manyToMany(relationName: "ProgramWorkouts")
  challenges: [Challenge] @manyToMany(relationName: "ChallengeWorkouts")
  exerciseItems: [ExerciseItem] @hasMany
  exercises: [Exercise] @manyToMany(relationName: "WorkoutExercise")
  properties: [WorkoutProperties] @hasMany
  category: Category @belongsTo
  authorCoach: [Coach] @manyToMany(relationName: "CoachWorkouts")
  authorUser: User @hasOne
  userWorkoutProgress: [UserWorkoutProgress] @hasMany
}

type Challenge @model @auth(rules: [{allow: private}]) {
  id: ID!
  name: String
  imageUrl: String
  homepageImageUrl: String
  backgroundColor: String
  description: String
  duration: String
  level: Level
  workouts: [Workout] @manyToMany(relationName: "ChallengeWorkouts")
  exerciseItems: [ExerciseItem] @hasMany
  exercises: [Exercise] @manyToMany(relationName: "ChallengeExercise")
  muscleGroups: [MuscleGroup] @manyToMany(relationName: "ChallengeMuscleGroups")
  trainingTypes: [TrainingType] @manyToMany(relationName: "ChallengeTrainingTypes")
  authorCoach: [Coach] @manyToMany(relationName: "CoachChallenges")
  authorUser: User @hasOne
}

type WorkoutProperties @model @auth(rules: [{allow: private}]) {
  id: ID!
  langu: String
  text: String
  icon: String
}

type UserWorkoutHistory @model @auth(rules: [{allow: private}]) {
  id: ID!
  workout: Workout @hasOne
  user: User @hasOne
  lastExercise: Exercise @hasOne
  lastExerciseItem: ExerciseItem @hasOne
  progress: ProgressIndicator
  createdAt: String!
  description: String
  exerciseCount: Int
}

type UserChallengeHistory @model @auth(rules: [{allow: private}]) {
  id: ID!
  challenge: Challenge @hasOne
  user: User @hasOne
  progress: ProgressIndicator
  createdAt: String!
  description: String
  exerciseCount: Int
  exerciseDuraionInSeconds: Int
}

type UserProgramHistory @model @auth(rules: [{allow: private}]) {
  id: ID!
  user: User @hasOne
  program: Program @hasOne
  lastWorkout: Workout @hasOne
  lastExerciseItem: ExerciseItem @hasOne
  progress: ProgressIndicator
}

type Category @model @auth(rules: [{allow: private}]) {
  id: ID!
  name: String
  imageUrl: String
  headerImageUrl: String
  description: String
  backgroundColor: String
  isFavorite: Boolean
  workouts: [Workout] @hasMany
}

type Blog @model @auth(rules: [{allow: private}]) {
  id: ID!
  name: String
  title: String
  subtitle: String
  imageUrl: String
  headerImageUrl: String
  description: String
  htmlContent: String
  backgroundColor: String
  isFavorite: Boolean
}

type Tag @model @auth(rules: [{allow: private}]) {
  id: ID!
  label: String!
  exercises: [Exercise] @manyToMany(relationName: "TagExercise")
}

type UserData {
  name: String
  workoutName: String
  exerciseCount: Int
  watchedExercise: Int
}

type UserWorkoutProgress @model @auth(rules: [{allow: private}]) {
  id: ID!
  userId: String!
  completedExercises: [ID!]!
  progress: Float!
  isCompleted: Boolean!
  workoutId: ID
  workoutName: String
  workoutExerciseCount: Int
}

type UserProgramProgress @model @auth(rules: [{allow: private}]) {
  id: ID!
  username: String!
}

enum UserType {
  REGULAR
  TRAINER
  ADMIN
  RESERVED
}

enum Level {
  BEGINNER
  EASY
  MEDIUM
  HARD
  RESERVED
}

enum ProgressIndicator {
  NOT_REGISTERED
  REGISTERED
  NOT_ENROLLED
  ENROLLED
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  RESERVED
}

enum NewsType {
  PUBLIC
  GROUP
  RESERVED
  VIDEO
  IMAGE
}
 